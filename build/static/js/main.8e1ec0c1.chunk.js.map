{"version":3,"sources":["constants.js","services/api.js","Components/Label/Label.jsx","Components/DropdownContent/DropdownContent.jsx","Components/Posts/Posts.jsx","Components/Input/InputField.jsx","App.js","reportWebVitals.js","index.js"],"names":["baseURL","apiKey","baseTrendingURL","a","fetch","then","res","json","query","Label","title","style","display","padding","DropDownContent","post","img","setImg","type","loading","className","src","images","fixed_width_downsampled","url","alt","id","onClick","selectedImg","push","cursor","Posts","index","item","handleStatusDelete","float","text","sources","map","InputField","setShowDropDown","setTrending","handleGifInp","inpVal","handleTextInp","placeholder","width","value","onFocus","e","getTrendingGifs","data","onChange","App","useState","setInpVal","setQuery","gifBtn","setGifBtn","trending","posts","setPosts","status","setStatus","setLoading","showDropDown","useEffect","onMount","JSON","parse","localStorage","getItem","updatedStatus","filter","ind","setItem","stringify","makeNetworkCall","queryText","getGifs","catch","err","console","log","debouncedFn","useMemo","fn","delay","timer","args","clearTimeout","setTimeout","debounce","target","margin","length","trend","disabled","Boolean","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e1ec0c1.chunk.js","sourcesContent":["export const baseURL = `https://api.giphy.com/v1/gifs/search?`;\nexport const apiKey = `api_key=zPVSPYksxDsaKTixDPuXVRQ01Wn0HCLZ`;\nexport const baseTrendingURL = `https://api.giphy.com/v1/gifs/trending?`;\n\n// https://api.giphy.com/v1/gifs/trending?api_key=zPVSPYksxDsaKTixDPuXVRQ01Wn0HCLZ&limit=25&rating=g\n","import { apiKey, baseTrendingURL, baseURL } from \"../constants\";\n\nexport async function getTrendingGifs() {\n  return await fetch(\n    `${baseTrendingURL}${apiKey}&limit=15&rating=g&lang=en`\n  ).then((res) => res.json());\n}\n\nexport async function getGifs(query) {\n  return await fetch(\n    `${baseURL}${apiKey}&q=${query}&limit=15&rating=g&lang=en`\n  ).then((res) => res.json());\n}\n","const Label = ({ title }) => {\n  return <label style={{ display: \"block\", padding: \"1rem 0\" }}>{title}</label>;\n};\n\nexport default Label;\n","const DropDownContent = ({ post, img, setImg, type, loading }) => {\n  return (\n    <>\n      {type === \"post\" ? (\n        loading ? (\n          \"loading...\"\n        ) : (\n          <div className=\"trendImg\">\n            <img\n              className=\"trendImg\"\n              src={post.images.fixed_width_downsampled.url}\n              alt={post.id}\n              onClick={() => {\n                let selectedImg = [...img];\n                selectedImg.push(post.images.fixed_width_downsampled.url);\n\n                setImg(selectedImg);\n              }}\n            />\n          </div>\n        )\n      ) : (\n        <div key={post.id} className=\"trendImg\">\n          <img\n            className=\"trendImg\"\n            src={post.images.fixed_width_downsampled.url}\n            alt={post.id}\n            style={{ cursor: \"not-allowed\" }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default DropDownContent;\n","const Posts = ({ index, item, handleStatusDelete }) => {\n  return (\n    <div className=\"card\">\n      <button\n        onClick={() => handleStatusDelete(index)}\n        style={{ float: \"right\" }}\n      >\n        X\n      </button>\n      <h2>{item.text}</h2>\n\n      {item.sources.map((images, index) => (\n        <img key={index} src={images} alt={images} />\n      ))}\n    </div>\n  );\n};\n\nexport default Posts;\n","import { getTrendingGifs } from \"../../services/api\";\n\nconst InputField = ({\n  title,\n  query,\n  setShowDropDown,\n  setTrending,\n  handleGifInp,\n  inpVal,\n  handleTextInp,\n  placeholder,\n}) => {\n  return (\n    <>\n      {title === \"gif\" ? (\n        <input\n          style={{ width: \"250px\" }}\n          type=\"text\"\n          value={query}\n          placeholder={placeholder}\n          onFocus={(e) => {\n            setShowDropDown(true);\n            getTrendingGifs().then((res) => setTrending(res.data));\n          }}\n          onChange={handleGifInp}\n        />\n      ) : (\n        <input\n          type=\"text\"\n          title={title}\n          value={inpVal}\n          placeholder={placeholder}\n          onChange={handleTextInp}\n        />\n      )}\n    </>\n  );\n};\n\nexport default InputField;\n","import { useEffect, useMemo, useState } from \"react\";\nimport { getGifs } from \"./services/api\";\nimport \"./App.css\";\nimport Label from \"./Components/Label/Label\";\nimport DropDownContent from \"./Components/DropdownContent/DropdownContent\";\nimport Posts from \"./Components/Posts/Posts\";\nimport InputField from \"./Components/Input/InputField\";\n\nfunction debounce(fn, delay) {\n  let timer;\n  return function (...args) {\n    clearTimeout(timer);\n\n    timer = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n\nexport default function App() {\n  const [inpVal, setInpVal] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [gifBtn, setGifBtn] = useState(false);\n  const [trending, setTrending] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [img, setImg] = useState([]);\n  const [status, setStatus] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showDropDown, setShowDropDown] = useState(false);\n\n  useEffect(() => {\n    const onMount = JSON.parse(localStorage.getItem(\"fbPosts\")) || [];\n    setStatus(onMount);\n  }, []);\n\n  const handleTextInp = (e) => {\n    setInpVal(e.target.value);\n  };\n\n  const handleAddStatus = () => {\n    const message = {\n      sources: img,\n      text: inpVal,\n    };\n    setStatus([message, ...status]);\n    localStorage.setItem(\"fbPosts\", JSON.stringify([message, ...status]));\n\n    setShowDropDown(false);\n    setGifBtn(false);\n    setImg([]);\n    setQuery(\"\");\n    setInpVal(\"\");\n  };\n\n  const handleStatusDelete = (index) => {\n    const updatedStatus = [...status].filter((item, ind) => ind !== index);\n    setStatus(updatedStatus);\n    localStorage.setItem(\"fbPosts\", JSON.stringify(updatedStatus));\n  };\n\n  const makeNetworkCall = (queryText) => {\n    if (!queryText) {\n      setPosts([]);\n      return;\n    }\n    getGifs(queryText)\n      .then((res) => {\n        setPosts(res.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  const handler = (e) => {\n    const { value } = e.target;\n    setQuery(value);\n    debouncedFn(value);\n  };\n\n  const debouncedFn = useMemo(() => debounce(makeNetworkCall, 1000), []);\n\n  return (\n    <div className=\"App\">\n      <h1>Create a new Post</h1>\n\n      <Label title=\"Add a new post\" />\n\n      <InputField\n        inpVal={inpVal}\n        placeholder=\"What's on your mind ?\"\n        title=\"post\"\n        handleTextInp={handleTextInp}\n      />\n\n      <button\n        style={{ display: \"block\", padding: \"0 1rem\", margin: \"1rem 0\" }}\n        onClick={() => setGifBtn(true)}\n      >\n        Add Gifs\n      </button>\n\n      {gifBtn ? (\n        <div className=\"App\">\n          <button\n            style={{ display: \"block\", padding: \"0 1rem\", margin: \"1rem 0\" }}\n            onClick={() => {\n              setGifBtn(false);\n              setQuery(\"\");\n            }}\n          >\n            Cancel\n          </button>\n          <Label title=\"Add a gif for a final touch!\" />\n\n          <InputField\n            title=\"gif\"\n            query={query}\n            placeholder=\"Search gifs\"\n            setShowDropDown={setShowDropDown}\n            handleGifInp={handler}\n            setTrending={setTrending}\n          />\n          {showDropDown ? (\n            <div className=\"dropdown\">\n              <button\n                onClick={() => {\n                  // setGifBtn(false);\n                  setShowDropDown(false);\n                  setQuery(\"\");\n                }}\n                style={{ float: \"right\" }}\n              >\n                x\n              </button>\n              <div className=\"dropdownContent\">\n                {query.length > 0\n                  ? posts.map((post) => {\n                      return (\n                        <DropDownContent\n                          loading={loading}\n                          type=\"post\"\n                          post={post}\n                          img={img}\n                          setImg={setImg}\n                          key={post.id}\n                        />\n                      );\n                    })\n                  : trending.map((trend) => {\n                      return <DropDownContent post={trend} key={trend.id} />;\n                    })}\n              </div>\n            </div>\n          ) : null}\n        </div>\n      ) : null}\n\n      <button\n        disabled={Boolean(inpVal.length) ? false : true}\n        style={{ display: \"block\", padding: \"0 1rem\", margin: \"1rem 0\" }}\n        onClick={handleAddStatus}\n      >\n        Add Post\n      </button>\n\n      <h1>My Posts</h1>\n      {Boolean(status.length) ? (\n        <div>\n          {status.map((item, index) => (\n            <Posts\n              key={index}\n              item={item}\n              index={index}\n              handleStatusDelete={handleStatusDelete}\n            />\n          ))}\n        </div>\n      ) : (\n        \"No Posts!\"\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}